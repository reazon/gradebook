<?xml version="1.0" encoding="UTF-8"?>
<project default="sakai:build"
	xmlns:j="jelly:core"
	xmlns:ant="jelly:ant"
	xmlns:maven="jelly:maven"
	xmlns:u="jelly:util">

	<goal name="sakai:sakai.build">
		<attainGoal name="war:install" />
	</goal>

	<preGoal name="war:webapp">
		<!--
			Some JAR dependencies are shared between the standalone application and the
			Sakai tool, but only need to be embedded inside the standalone WAR.
			The rule we follow is that any dependency which isn't explicitly marked
			with <war.bundle>false</war.bundle> will be included.
		-->
		<j:forEach var="lib" items="${pom.artifacts}">
			<j:set var="dep" value="${lib.dependency}"/>
			<j:if test="${dep.getProperty('war.bundle')!='false'}">
				<ant:copy todir="${maven.war.webapp.dir}/WEB-INF/lib" file="${lib.path}" overwrite="true" />
			</j:if>
		</j:forEach>
	</preGoal>

	<!-- Copy the war into the tomcat webapps dir -->
	<postGoal name="war:war">
		<j:if test="${standalone.equals('true')}">
			<ant:echo message="Copying standalone webapp ${pom.artifactId} to deployment directory '${standalone.deploy.dir}'"/>
			<delete dir="${standalone.deploy.dir}/${pom.artifactId}"/>
			<ant:copy file="${maven.build.dir}/${maven.war.final.name}" todir="${standalone.deploy.dir}" overwrite="true"/>
		</j:if>
	</postGoal>

	<!-- Allow different Hibernate setups for testing. -->
	<postGoal name="test:test-resources">
		<j:choose>
			<j:when test="${mem.equals('false')}">
				<!-- Use the main build's Hibernate settings. -->
				<j:set var="maven.test.hibernate.properties.dir" value="${hibernate.properties.dir}"/>
			</j:when>
			<j:otherwise>
				<!-- Use the default in-memory Hibernate settings. -->
				<j:set var="maven.test.hibernate.properties.dir" value="${basedir}/src/test"/>
			</j:otherwise>
		</j:choose>
		<ant:echo message="Copying ${maven.test.hibernate.properties.dir}/hibernate.properties to ${maven.test.dest}"/>
		<ant:copy file="${maven.test.hibernate.properties.dir}/hibernate.properties" todir="${maven.test.dest}" overwrite="true"/>
	</postGoal>

	<!-- This goal just prints out SQL without changing the database. -->
	<goal name="schema">
		<j:set var="schemaexport.noDatabaseOverwrite" value="yes"/>
		<attainGoal name="common-schema" />
	</goal>

	<!-- This goal overwrites the database with the Hibernate-derived schema. -->
	<goal name="load-schema">
		<j:set var="schemaexport.noDatabaseOverwrite" value="no"/>
		<attainGoal name="common-schema" />
	</goal>

	<goal name="common-schema">
		<!-- Skip the tests -->
		<j:set var="maven.test.skip" value="true" />

		<!-- Run the non-db tests first, so all of the test classes and mappings are available in ${maven.build.dest} -->
		<attainGoal name="test:test" />
		<j:set var="maven.hibernate.properties" value="${hibernate.properties.dir}/hibernate.properties" />
		<j:set var="hibernate.hbm2ddl.auto" value="create" />
		<j:set var="maven.hibernate.delimiter" value=";" />
		<j:set var="maven.hibernate.quiet" value="false" />
		<j:set var="maven.hibernate.input.dir" value="${basedir}/../../service/hibernate/src/hibernate/org/sakaiproject/tool/gradebook,${basedir}/target/classes" />
		<j:set var="maven.hibernate.input.includes" value="**/*.hbm.xml" />

		<!-- The Maven plug-in for Hibernate 3 is not yet available to support this goal. -->
		<!--
		<attainGoal name="hibernate:schema-export" />
		-->
		<ant:path id="schemaexport.classpath">
			<ant:path refid="maven.dependency.classpath" />
			<ant:pathelement location="${basedir}/target/classes" />
		</ant:path>
		<ant:taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask" classpathref="schemaexport.classpath" />
		<ant:schemaexport properties="${maven.hibernate.properties}" delimiter=";" text="${schemaexport.noDatabaseOverwrite}" output="${basedir}/target/gradebook.sql">
			<ant:fileset dir="${basedir}/../../service/hibernate/src/hibernate/org/sakaiproject/tool/gradebook">
				<ant:include name="${maven.hibernate.input.includes}"/>
			</ant:fileset>
		</ant:schemaexport>
	</goal>

	<goal name="test-against-loaded-data">
		<!-- Skip the normal tests. -->
		<j:set var="maven.test.skip" value="true" />

		<!-- Don't use the in-memory DB usually used for tests. -->
		<j:set var="mem" value="false" />
		<j:set var="maven.hibernate.properties" value="${hibernate.properties.dir}/hibernate.properties" />

		<j:set var="testcase" value="org.sakaiproject.tool.gradebook.test.TestServiceAgainstLoadedData" />
		<attainGoal name="test:single" />
	</goal>

	<goal name="load-full">
		<!--
			Export the full schema out to the DB rather than just doing an update.
			(This is to work around a current bug in Hibernate that keeps indexes
			from being added on SchemaUpdate.)
		-->
		<attainGoal name="load-sections" />
		<attainGoal name="load-gradebook-data" />
	</goal>

	<goal name="load-sections">
		<!-- Skip the tests -->
		<j:set var="maven.test.skip" value="true" />
		<!-- Don't use the in-memory DB usually used for tests, since it wouldn't work anyway. -->
		<j:set var="mem" value="false" />

		<j:set var="testcase" value="org.sakaiproject.tool.gradebook.test.StandaloneSectionsDataLoader" />
		<attainGoal name="test:single" />
	</goal>

	<goal name="load-gradebook-data">
		<!-- Skip the tests -->
		<j:set var="maven.test.skip" value="true" />
		<!-- Don't use the in-memory DB usually used for tests, since it wouldn't work anyway. -->
		<j:set var="mem" value="false" />

		<attainGoal name="load-schema" />
		<attainGoal name="load-gradebooks" />
		<attainGoal name="load-grades" />
	</goal>

	<goal name="load-gradebooks">
		<j:set var="testcase" value="org.sakaiproject.tool.gradebook.test.TestGradebookLoader" />
		<attainGoal name="test:single" />
	</goal>

	<goal name="load-grades">
		<j:set var="testcase" value="org.sakaiproject.tool.gradebook.test.TestGradeLoader" />
		<attainGoal name="test:single" />
	</goal>

</project>
